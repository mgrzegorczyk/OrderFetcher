@page "/orders"
@rendermode InteractiveServer
@using OrderFetcher.Application.Interfaces
@using OrderFetcher.Domain.Entities
@inject IOrderService OrderService
@inject NavigationManager Navigation

<h3>Orders</h3>

@if (orders == null)
{
    <p>Loading...</p>
}
else if (!orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Order Number</th>
                    <th>Order Date</th>
                    <th>Amount</th>
                    <th>Total Amount</th>
                    <th>Currency</th>
                    <th>Shipping Method</th>
                    <th>Payment Method</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr>
                        <td>@order.OrderNumber</td>
                        <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                        <td>@order.Amount</td>
                        <td>@order.TotalAmount</td>
                        <td>@order.Currency</td>
                        <td>@order.ShippingMethod</td>
                        <td>@order.PaymentMethod</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => ShowOrderDetails(order.Id)">Details</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="PrevPage">Previous</button>
            </li>

            @for (int pageNumber = 1; pageNumber <= totalPages; pageNumber++)
            {
                var buttonPageNumber = pageNumber;
                <li class="page-item @(buttonPageNumber == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(buttonPageNumber)">@buttonPageNumber</button>
                </li>
            }

            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
}

@code {
    private List<Order> orders = new();
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;
    private int totalItems = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        var result = await OrderService.GetOrdersAsync(currentPage, pageSize);
        orders = result.Items;
        totalItems = result.TotalCount;
        totalPages = (int)Math.Ceiling(totalItems / (double)pageSize);
    }

    private async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadOrdersAsync();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadOrdersAsync();
        }
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadOrdersAsync();
    }

    private void ShowOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"/order-details/{orderId}");
    }
}
