@page "/orders"
@rendermode InteractiveServer
@using OrderFetcher.Application.Interfaces
@using OrderFetcher.Domain.Entities
@inject IOrderService OrderService
@inject NavigationManager Navigation

<h3>Orders</h3>

@if (orders == null)
{
    <p>Loading...</p>
}
else if (!orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
            <tr>
                <th>Order Number</th>
                <th>Order Date</th>
                <th>Amount</th>
                <th>Total Amount</th>
                <th>Currency</th>
                <th>Shipping Method</th>
                <th>Payment Method</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                    <td>@order.Amount</td>
                    <td>@order.TotalAmount</td>
                    <td>@order.Currency</td>
                    <td>@order.ShippingMethod</td>
                    <td>@order.PaymentMethod</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => ShowOrderDetails(order.Id)">Details</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Order>? orders;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orders = await OrderService.GetOrdersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching orders: {ex.Message}");
        }
    }

    private void ShowOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"/order-details/{orderId}");
    }
}
