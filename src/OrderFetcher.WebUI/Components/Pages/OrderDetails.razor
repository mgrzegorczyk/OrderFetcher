@page "/order-details/{OrderId:int}"
@rendermode InteractiveServer
@using OrderFetcher.Application.Interfaces
@using OrderFetcher.Domain.Entities
@inject IOrderService OrderService
@inject NavigationManager Navigation

<h3>Order Details</h3>

@if (order == null)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-secondary" @onclick="GoBack">Back to Orders</button>
    <div class="card">
        <div class="card-header">
            <h4>Order: @order.OrderNumber</h4>
        </div>
        <div class="card-body">
            <p><strong>Order Date:</strong> @(order.OrderDate.ToString("yyyy-MM-dd") ?? "N/A")</p>
            <p><strong>Total Amount:</strong> @order.TotalAmount @order.Currency</p>
            <p><strong>Shipping Method:</strong> @order.ShippingMethod</p>
            <p><strong>Payment Method:</strong> @order.PaymentMethod</p>
        </div>
    </div>

    <h4>Items</h4>
    @if (order.Items == null || !order.Items.Any())
    {
        <p>No items found for this order.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in order.Items)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>@item.Price</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h4>Billing Address</h4>
    @if (order.BillingAddress == null)
    {
        <p>No billing address provided.</p>
    }
    else
    {
        <div>
            <p><strong>Name:</strong> @order.BillingAddress.FullName</p>
            <p><strong>Street:</strong> @order.BillingAddress.Street</p>
            <p><strong>Building Number:</strong> @order.BillingAddress.BuildingNumber</p>
            <p><strong>Postal Code:</strong> @order.BillingAddress.PostalCode</p>
            <p><strong>City:</strong> @order.BillingAddress.City</p>
            <p><strong>Phone:</strong> @order.BillingAddress.PhoneNumber</p>
            <p><strong>Email:</strong> @order.BillingAddress.Email</p>
        </div>
    }
}

@code {
    [Parameter]
    public int OrderId { get; set; }

    private Order? order;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            order = await OrderService.GetOrderByIdAsync(OrderId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching order details: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/orders");
    }
}
