@page "/order-details/{OrderId:int}"
@rendermode InteractiveServer
@using OrderFetcher.Application.Dtos
@using OrderFetcher.Application.Interfaces
@inject IOrderService OrderService
@inject NavigationManager Navigation

<h3>Order Details</h3>

@if (order == null)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-secondary mb-3" @onclick="GoBack">Back to Orders</button>

    <div class="card mb-4">
        <div class="card-header">
            <h4>Order: @order.OrderNumber</h4>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Order Date:</dt>
                <dd class="col-sm-9">@order.OrderDate.ToString("yyyy-MM-dd")</dd>

                <dt class="col-sm-3">Total Amount:</dt>
                <dd class="col-sm-9">@order.TotalAmount @order.Currency</dd>

                <dt class="col-sm-3">Shipping Method:</dt>
                <dd class="col-sm-9">@order.ShippingMethod</dd>

                <dt class="col-sm-3">Payment Method:</dt>
                <dd class="col-sm-9">@order.PaymentMethod</dd>
            </dl>
        </div>
    </div>

    <h4>Items</h4>
    @if (order.Items == null || !order.Items.Any())
    {
        <p>No items found for this order.</p>
    }
    else
    {
        <div class="table-responsive mb-4">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-dark">
                <tr>
                    <th>Product Name</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in order.Items)
                {
                    <tr>
                        <td>@item.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>@item.Price</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }

    <h4>Billing Address</h4>
    @if (order.BillingAddress == null)
    {
        <p>No billing address provided.</p>
    }
    else
    {
        <div class="row mb-5">
            <div class="col-md-6">
                <p><strong>Name:</strong> @order.BillingAddress.FullName</p>
                <p><strong>Street:</strong> @order.BillingAddress.Street</p>
                <p><strong>Building Number:</strong> @order.BillingAddress.BuildingNumber</p>
                <p><strong>Postal Code:</strong> @order.BillingAddress.PostalCode</p>
            </div>
            <div class="col-md-6">
                <p><strong>City:</strong> @order.BillingAddress.City</p>
                <p><strong>Phone:</strong> @order.BillingAddress.PhoneNumber</p>
                <p><strong>Email:</strong> @order.BillingAddress.Email</p>
            </div>
        </div>
    }
    
    <h4>Shipping Address</h4>
    @if (order.ShippingAddress == null)
    {
        <p>No shipping address provided.</p>
    }
    else
    {
        <div class="row mb-5">
            <div class="col-md-6">
                <p><strong>Name:</strong> @order.ShippingAddress.FullName</p>
                <p><strong>Street:</strong> @order.ShippingAddress.Street</p>
                <p><strong>Building Number:</strong> @order.ShippingAddress.BuildingNumber</p>
                <p><strong>Postal Code:</strong> @order.ShippingAddress.PostalCode</p>
            </div>
            <div class="col-md-6">
                <p><strong>City:</strong> @order.ShippingAddress.City</p>
                <p><strong>Phone:</strong> @order.ShippingAddress.PhoneNumber</p>
                <p><strong>Email:</strong> @order.ShippingAddress.Email</p>
            </div>
        </div>
    }

}

@code {
    [Parameter]
    public int OrderId { get; set; }

    private OrderDto? order;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            order = await OrderService.GetOrderByIdAsync(OrderId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching order details: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/orders");
    }
}
